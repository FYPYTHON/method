# coding=utf-8import ctypesfrom ctypes import c_char_p,c_int, create_string_buffer, POINTER, pointer, Structurefrom ctypes import c_floatSO_LIB = '/home/test/pyc/cpplib/'# global_so = ctypes.CDLL(SO_LIB + 'global.so', mode=ctypes.RTLD_GLOBAL)pyc_so = ctypes.CDLL(SO_LIB + 'libpyc.so')print(pyc_so)# char achKey[1024];# char achValue[1024];# int  nLen;class KeyValue(Structure):    _fields_ = [        ('achKey', c_char_p),        ('achValue', c_char_p),        ('nLen', c_int)    ]def add():    """    int    :return:  num1 + num2    """    num1 = c_int(2)    num2 = c_int(2)    pyc_so.add.restype = c_int    pyc_so.add.argtypes = [POINTER(c_int), c_int]    result = pyc_so.add(pointer(num1), num2)    print("result add:", num1.value, "+", num2.value)    print(result)def sub():    """    float    :return: num2- num1    """    num1 = c_float(3.0)    num2 = c_float(4.0)    pyc_so.sub.restype = c_float    pyc_so.sub.argtypes = [POINTER(c_float), c_float]    result = pyc_so.sub(pointer(num1), num2)    print("result sub:", num2.value, '-', num1.value)    print(result)if __name__ == '__main__':    add()    sub()    print("kv:")    kv = KeyValue()    kv.achKey = b'tews'    kv.achValue = b'valu1df'    kv.nLen = 2    print(kv.nLen)    print(kv.achKey, kv.achValue, kv.nLen)